window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "bnn4hi", "modulename": "bnn4hi", "kind": "module", "doc": "<h1 id=\"bnn_for_hyperspectral_datasets_analysis\">BNN_for_hyperspectral_datasets_analysis</h1>\n\n<p>This repository contains python code to train bayesian neural networks for some of the most widely used open hyperspectral imaging datasets and to analyse the results.</p>\n\n<p>This is the code of the paper <em>Bayesian Neural Networks to Analyze Hyperspectral Datasets Using Uncertainty Metrics</em>. If it is useful to you, please cite:</p>\n\n<p>A. Alcolea and J. Resano, \"Bayesian Neural Networks to Analyze Hyperspectral Datasets Using Uncertainty Metrics\", in IEEE Transactions on Geoscience and Remote Sensing, vol. 60, pp. 1-10, 2022, doi: 10.1109/TGRS.2022.3205119.</p>\n\n<p>@article{alcolea2022bayesian, <br />\nauthor = {Alcolea, Adri\u00e1n and Resano, Javier}, <br />\njournal = {IEEE Transactions on Geoscience and Remote Sensing}, <br />\ntitle = {Bayesian Neural Networks to Analyze Hyperspectral Datasets Using Uncertainty Metrics}, <br />\nyear = {2022}, <br />\nvolume = {60}, <br />\npages = {1-10}, <br />\ndoi = {10.1109/TGRS.2022.3205119} <br />\n}</p>\n\n<h2 id=\"how-to-run\">How to run</h2>\n\n<h3 id=\"with-the-sh-script-in-linux\">With the 'sh' script in linux</h3>\n\n<blockquote>\n  <p>./launch.sh</p>\n</blockquote>\n\n<p>Will run every step needed to reproduce the experiments of the paper <em>Bayesian Neural Networks to Analyze Hyperspectral Datasets Using Uncertainty Metrics</em>. Actually, it will only train the models for 100 epochs to easily test that everything works. There is a boolean variable in <em>launch.sh</em> called TEST_EXECUTION set to <em>true</em>. For launching the same number of epochs of the paper, set it to <em>false</em>.</p>\n\n<p>You must have python3 installed with the following libraries: numpy, matplotlib, spectral, scipy, scikit-learn, tensorflow and tensorflow_probability.</p>\n\n<h3 id=\"with-docker-in-linux\">With docker in linux</h3>\n\n<blockquote>\n  <p>docker build -t bnn4hi .</p>\n</blockquote>\n\n<p>Will generate the container.</p>\n\n<blockquote>\n  <p>docker run -v ${PWD}:/workdir bnn4hi</p>\n</blockquote>\n\n<p>Will run <em>./launch.py</em> in docker using the repository directory as input and output point, so the result will be the same as running <em>./launch.py</em> but avoiding to install the dependencies.</p>\n\n<h2 id=\"use-and-files-explanation\">Use and files explanation</h2>\n\n<h3 id=\"train\">Train</h3>\n\n<blockquote>\n  <p>./train.py NAME EPOCHS PERIOD</p>\n</blockquote>\n\n<p>Will train the NAME dataset for EPOCHS epochs saving a checkpoint and writing information to stdout every PERIOD epochs.</p>\n\n<p>The resultant trained checkpoints will be in <em>Models/{NAME}_{LAYER1_NEURONS}-{LAYER2_NEURONS}model_{P_TRAIN}train_{EPOCHS}ep_{LEARNING_RATE}lr/</em>, organised with an <em>epoch_{EPOCH}</em> directory for each checkpoint.</p>\n\n<p>Where LAYER1_NEURONS and LAYER2_NEURONS correspond to the number of neurons of the layers of the model, P_TRAIN corresponds to the percentage of pixels used for training and LEARNING_RATE corresponds to the initial learning rate. All of them are defined in <em>lib/config.py</em>. Also EPOCH corresponds to the current checkpoint epoch according to PERIOD.</p>\n\n<h3 id=\"test\">Test</h3>\n\n<blockquote>\n  <p>./test.py BO_EPOCHS IP_EPOCHS KSC_EPOCHS PU_EPOCHS SV_EPOCHS -e BO_EPOCH IP_EPOCH KSC_EPOCH PU_EPOCH SV_EPOCH</p>\n</blockquote>\n\n<p>Will perform the necessary tests to generate the <em>reliability diagram</em> and the <em>accuracy vs. uncertainty</em> plots, along with the <em>class uncertainty</em> plot of each image. For that, it is necessary that the five dataset models are already trained. The plots will be saved in <em>Test/</em>.</p>\n\n<p>The five mandatory <em>epochs</em> parameters of <em>./test.py</em> correspond with the number of trained epochs of each model in this order: BO, IP, KSC, PU and SV. The optional parameter <em>-e</em> corresponds with the epoch (within the available checkpoints) that we want to test for each one of them. By default, if <em>-e</em> is not present, its value will be the mandatory <em>epochs</em> parameter of each model. Note that the mandatory parameters are necessary because the total number of trained epochs is part of the name of the directory containing the checkpoints of each dataset. Usually it will also be the selected model (as it is the one trained for more epochs), so the optional <em>-e</em> parameter will not be necessary, but sometimes it will not be the best one (due, for example, to overfitting), so we will want to select a particular checkpoint for each dataset with the <em>-e</em> parameter.</p>\n\n<h3 id=\"test-map\">Test map</h3>\n\n<p>Here we call the entire hyperspectral image a <em>map</em>, that is, every pixel on its original position to conform the image; and not only the labelled pixels, but the unlabelled too.</p>\n\n<blockquote>\n  <p>./test_map.py NAME EPOCHS -e EPOCH</p>\n</blockquote>\n\n<p>Will perform the inference of every pixel of the NAME dataset and generate a pdf image called <em>H_NAME.pdf</em> containing the RGB image, the ground truth, the prediction (with a different colour for each class) and the uncertainty map (with a different colour for each range of uncertainty). The images will be saved in <em>Test/</em>.</p>\n\n<p>As in <em>test.py</em>, EPOCHS refers to the number of epochs trained and the optional <em>-e</em> parameter, EPOCH, to the specific epoch that we want to test from the different checkpoints.</p>\n\n<h3 id=\"test-with-noisy-data\">Test with noisy data</h3>\n\n<blockquote>\n  <p>./test_noise.py BO_EPOCHS IP_EPOCHS KSC_EPOCHS PU_EPOCHS SV_EPOCHS -e BO_EPOCH IP_EPOCH KSC_EPOCH PU_EPOCH SV_EPOCH</p>\n</blockquote>\n\n<p>Will perform the necessary tests to generate the <em>combined noise</em> plot. For that, it is necessary that the five dataset models are already trained. The plots will be saved in <em>Test/</em>.</p>\n\n<p>The parameters are the same of <em>train.py</em> and they behave the same way.</p>\n\n<h3 id=\"train-with-mixed-classes\">Train with mixed classes</h3>\n\n<p>The exact same execution of <em>train.py</em> activating the <em>-m</em> flag will generate the trained model with mixed classes.</p>\n\n<p>The resultant trained checkpoints will be in <em>Models/{NAME}_{LAYER1_NEURONS}-{LAYER2_NEURONS}model_{P_TRAIN}train_{EPOCHS}ep_{LEARNING_RATE}lr_{CLASS_A}-{CLASS_B}mixed/</em> with an <em>epoch_{EPOCH}</em> directory for each checkpoint.</p>\n\n<p>Where CLASS_A and CLASS_B correspond to the numbers of the mixed classes, which are defined for each dataset in <em>lib/config.py</em>.</p>\n\n<h3 id=\"test-models-with-mixed-classes\">Test models with mixed classes</h3>\n\n<blockquote>\n  <p>./test_mixed.py BO_EPOCHS IP_EPOCHS KSC_EPOCHS PU_EPOCHS SV_EPOCHS -e BO_EPOCH IP_EPOCH KSC_EPOCH PU_EPOCH SV_EPOCH</p>\n</blockquote>\n\n<p>Will perform the necessary tests to generate and print a table with the <em>aleatoric uncertainty</em> of the mixed classes and the <em>mixed classes</em> plot of each model. For that, it is necessary that the five dataset models are already trained. The results will be saved in <em>Test/</em>.</p>\n\n<p>The parameters are the same of <em>train.py</em> and they behave the same way.</p>\n"}, {"fullname": "bnn4hi.lib", "modulename": "bnn4hi.lib", "kind": "module", "doc": "<h1 id=\"lib\">lib</h1>\n\n<p>This library contains the internal modules of bnn4hi package.</p>\n\n<h2 id=\"modules\">modules</h2>\n\n<h3 id=\"configpy\">config.py</h3>\n\n<p><em>Config module of the BNN4HI package</em></p>\n\n<p>This module provides macros with data information, training and testing\nparameters and plotting configurations.</p>\n\n<h3 id=\"datapy\">data.py</h3>\n\n<p><em>Data module of the BNN4HI package</em></p>\n\n<p>The functions of this module are used to load, preprocess and organise\ndata from hyperspectral datasets.</p>\n\n<h3 id=\"modelpy\">model.py</h3>\n\n<p><em>Model module of the BNN4HI package</em></p>\n\n<p>This module defines the bayesian model used to train.</p>\n\n<h3 id=\"analysispy\">analysis.py</h3>\n\n<p><em>Analysis module of the BNN4HI package</em></p>\n\n<p>The functions of this module are used to generate and analyse bayesian\npredictions.</p>\n\n<h3 id=\"plotpy\">plot.py</h3>\n\n<p><em>Plot module of the BNN4HI package</em></p>\n\n<p>The functions of this module are used to generate plots using the\nresults of the analysed bayesian predictions.</p>\n"}, {"fullname": "bnn4hi.lib.HSI2RGB", "modulename": "bnn4hi.lib.HSI2RGB", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bnn4hi.lib.HSI2RGB.HSI2RGB", "modulename": "bnn4hi.lib.HSI2RGB", "qualname": "HSI2RGB", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">wY</span>, </span><span class=\"param\"><span class=\"n\">HSI</span>, </span><span class=\"param\"><span class=\"n\">ydim</span>, </span><span class=\"param\"><span class=\"n\">xdim</span>, </span><span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">threshold</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.analysis", "modulename": "bnn4hi.lib.analysis", "kind": "module", "doc": "<p>Analysis module of the BNN4HI package</p>\n\n<p>The functions of this module are used to generate and analyse bayesian\npredictions.</p>\n"}, {"fullname": "bnn4hi.lib.analysis.reliability_diagram", "modulename": "bnn4hi.lib.analysis", "qualname": "reliability_diagram", "kind": "function", "doc": "<p>Generates the <code>reliability diagram</code> data</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predictions</strong> (ndarray):\nArray with the bayesian predictions.</li>\n<li><strong>y_test</strong> (ndarray):\nTesting data set labels.</li>\n<li><strong>num_groups : int, optional (default</strong> (10)):\nNumber of groups in which the prediction will be divided\naccording to their predicted probability.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>result</strong> (list of float):\nList of the observed probabilities of each one of the predicted\nprobability groups.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions</span>, </span><span class=\"param\"><span class=\"n\">y_test</span>, </span><span class=\"param\"><span class=\"n\">num_groups</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.analysis.accuracy_vs_uncertainty", "modulename": "bnn4hi.lib.analysis", "qualname": "accuracy_vs_uncertainty", "kind": "function", "doc": "<p>Generates the <code>accuracy vs uncertainty</code> data</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predictions</strong> (ndarray):\nArray with the bayesian predictions.</li>\n<li><strong>y_test</strong> (ndarray):\nTesting data set labels.</li>\n<li><strong>H_limit : float, optional (default</strong> (1.5)):\nThe max value of the range of uncertainty.</li>\n<li><strong>num_groups : int, optional (default</strong> (15)):\nNumber of groups in which the prediction will be divided\naccording to their uncertainty.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>H_acc</strong> (list of float):\nList of the accuracies of each one of the uncertainty groups.</li>\n<li><strong>p_pixels</strong> (list of float):\nList of the percentage of pixels belonging to each one of the\nuncertainty groups.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions</span>, </span><span class=\"param\"><span class=\"n\">y_test</span>, </span><span class=\"param\"><span class=\"n\">H_limit</span><span class=\"o\">=</span><span class=\"mf\">1.5</span>, </span><span class=\"param\"><span class=\"n\">num_groups</span><span class=\"o\">=</span><span class=\"mi\">15</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.analysis.analyse_entropy", "modulename": "bnn4hi.lib.analysis", "qualname": "analyse_entropy", "kind": "function", "doc": "<p>Calculates the average uncertainty values by class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predictions</strong> (ndarray):\nArray with the bayesian predictions.</li>\n<li><strong>y_test</strong> (ndarray):\nTesting data set labels.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>class_H_avg</strong> (ndarray):\nList of the averages of the global uncertainty (H) of each\nclass. The last position also contains the average of the\nentire image.</li>\n<li><strong>class_Ep_avg</strong> (ndarray):\nList of the averages of the aleatoric uncertainty (Ep) of each\nclass. The last position also contains the average of the\nentire image.</li>\n<li><strong>class_H_Ep_avg</strong> (ndarray):\nList of the averages of the epistemic uncertainty (H - Ep) of\neach class. The last position also contains the average of the\nentire image.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.analysis.map_prediction", "modulename": "bnn4hi.lib.analysis", "qualname": "map_prediction", "kind": "function", "doc": "<p>Returns the bayesian predictions and global uncertainties (H)</p>\n\n<p>This function is implemented to facilitate all the data required\nfor the maps comparisons.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predictions</strong> (ndarray):\nArray with the bayesian predictions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pred_map</strong> (ndarray):\nArray with the averages of the bayesian predictions.</li>\n<li><strong>test_H</strong> (ndarray):\nArray with the global uncertainty (H) values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predictions</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.analysis.bayesian_predictions", "modulename": "bnn4hi.lib.analysis", "qualname": "bayesian_predictions", "kind": "function", "doc": "<p>Generates bayesian predictions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (TensorFlow Keras Sequential):\nTrained bayesian model.</li>\n<li><strong>X_test</strong> (ndarray):\nTesting data set.</li>\n<li><strong>samples : int, optional (default</strong> (100)):\nNumber of bayesian passes to perform.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>predictions</strong> (ndarray):\nArray with the bayesian predictions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.config", "modulename": "bnn4hi.lib.config", "kind": "module", "doc": "<p>Config module of the BNN4HI package</p>\n\n<p>This module provides macros with data information, training and testing\nparameters and plotting configurations.</p>\n"}, {"fullname": "bnn4hi.lib.data", "modulename": "bnn4hi.lib.data", "kind": "module", "doc": "<p>Data module of the BNN4HI package</p>\n\n<p>The functions of this module are used to load, preprocess and organise\ndata from hyperspectral datasets.</p>\n"}, {"fullname": "bnn4hi.lib.data.get_dataset", "modulename": "bnn4hi.lib.data", "qualname": "get_dataset", "kind": "function", "doc": "<p>Returns the preprocessed training and testing data and labels</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dataset</strong> (dict):\nDict structure with information of the image. Described in the\nconfig module of BNN4HI package.</li>\n<li><strong>data_path</strong> (str):\nPath of the datasets. It can be an absolute path or relative\nfrom the execution path.</li>\n<li><strong>p_train</strong> (float):\nRepresents, from 0.0 to 1.0, the proportion of the dataset that\nwill be used for the training set.</li>\n<li><strong>seed : int, optional (default</strong> (35)):\nRandom seed used to shuffle the data. The same seed will\nproduce the same distribution of pixels between train and test\nsets. The default value (35) is just there for reproducibility\npurposes, as it is the used seed in the paper <code>Bayesian Neural\nNetworks to Analyze Hyperspectral Datasets Using Uncertainty\nMetrics</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>X_train</strong> (ndarray):\nTraining data set.</li>\n<li><strong>y_train</strong> (ndarray):\nTraining data set labels.</li>\n<li><strong>X_test</strong> (ndarray):\nTesting data set.</li>\n<li><strong>y_test</strong> (ndarray):\nTesting data set labels.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">data_path</span>, </span><span class=\"param\"><span class=\"n\">p_train</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">35</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.data.get_noisy_dataset", "modulename": "bnn4hi.lib.data", "qualname": "get_noisy_dataset", "kind": "function", "doc": "<p>Returns train set and several test sets with increasing noise</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dataset</strong> (dict):\nDict structure with information of the image. Described in the\nconfig module of BNN4HI package.</li>\n<li><strong>data_path</strong> (str):\nPath of the datasets. It can be an absolute path or relative\nfrom the execution path.</li>\n<li><strong>p_train</strong> (float):\nRepresents, from 0.0 to 1.0, the proportion of the dataset that\nwill be used for the training set.</li>\n<li><strong>noises</strong> (array_like of floats):\nEach value represents, from 0.0 to 1.0, one noise factor. The\nclosest to 1.0 will produce the higher noise values. A testing\nset will be generated for each received noise.</li>\n<li><strong>seed: int, optional (default</strong> (35)):\nRandom seed used to shuffle the data. The same seed will\nproduce the same distribution of pixels between train and test\nsets. The default value (35) is just there for reproducibility\npurposes, as it is the used seed in the paper <code>Bayesian Neural\nNetworks to Analyze Hyperspectral Datasets Using Uncertainty\nMetrics</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>X_train</strong> (ndarray):\nTraining data set.</li>\n<li><strong>y_train</strong> (ndarray):\nTraining data set labels.</li>\n<li><strong>noisy_X_tests</strong> (ndarray):\nOne testing data set per received noise.</li>\n<li><strong>y_test</strong> (ndarray):\nTesting data set labels. It is the same for every testing set.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">data_path</span>, </span><span class=\"param\"><span class=\"n\">p_train</span>, </span><span class=\"param\"><span class=\"n\">noises</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">35</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.data.get_mixed_dataset", "modulename": "bnn4hi.lib.data", "qualname": "get_mixed_dataset", "kind": "function", "doc": "<p>Returns the datasets with mixed classes on the training set</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dataset</strong> (dict):\nDict structure with information of the image. Described in the\nconfig module of BNN4HI package.</li>\n<li><strong>data_path</strong> (str):\nPath of the datasets. It can be an absolute path or relative\nfrom the execution path.</li>\n<li><strong>p_train</strong> (float):\nRepresents, from 0.0 to 1.0, the proportion of the dataset that\nwill be used for the training set.</li>\n<li><strong>class_a</strong> (int):\nNumber of the first class to be mixed.</li>\n<li><strong>class_b</strong> (int):\nNumber of the second class to be mixed.</li>\n<li><strong>seed : int, optional (default</strong> (35)):\nRandom seed used to shuffle the data. The same seed will\nproduce the same distribution of pixels between train and test\nsets. The default value (35) is just there for reproducibility\npurposes, as it is the used seed in the paper <code>Bayesian Neural\nNetworks to Analyze Hyperspectral Datasets Using Uncertainty\nMetrics</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>X_train</strong> (ndarray):\nTraining data set.</li>\n<li><strong>y_train</strong> (ndarray):\nTraining data set labels with mixed labels for <code>class_a</code> and\n<code>class_b</code>.</li>\n<li><strong>X_test</strong> (ndarray):\nTesting data set.</li>\n<li><strong>y_test</strong> (ndarray):\nTesting data set labels.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">data_path</span>, </span><span class=\"param\"><span class=\"n\">p_train</span>, </span><span class=\"param\"><span class=\"n\">class_a</span>, </span><span class=\"param\"><span class=\"n\">class_b</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">35</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.data.get_map", "modulename": "bnn4hi.lib.data", "qualname": "get_map", "kind": "function", "doc": "<p>Returns all the pixels and labels of the image preprocessed</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dataset</strong> (dict):\nDict structure with information of the image. Described in the\nconfig module of BNN4HI package.</li>\n<li><strong>data_path</strong> (str):\nPath of the datasets. It can be an absolute path or relative\nfrom the execution path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>X</strong> (ndarray):\nHyperspectral image pixels standardised.</li>\n<li><strong>y</strong> (ndarray):\nGround truth.</li>\n<li><strong>shape</strong> (tuple of ints):\nOriginal shape to reconstruct the image (without channels, just\nheight and width).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">data_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.data.get_image", "modulename": "bnn4hi.lib.data", "qualname": "get_image", "kind": "function", "doc": "<p>Returns the image prepared for the RGB representation algorithm</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dataset</strong> (dict):\nDict structure with information of the image. Described in the\nconfig module of BNN4HI package.</li>\n<li><strong>data_path</strong> (str):\nPath of the datasets. It can be an absolute path or relative\nfrom the execution path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>X</strong> (ndarray):\nHyperspectral image pixels normalised.</li>\n<li><strong>shape</strong> (tuple of ints):\nOriginal shape to reconstruct the image.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">data_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.model", "modulename": "bnn4hi.lib.model", "kind": "module", "doc": "<p>Model module of the BNN4HI package</p>\n\n<p>This module defines the bayesian model used to train.</p>\n"}, {"fullname": "bnn4hi.lib.model.get_model", "modulename": "bnn4hi.lib.model", "qualname": "get_model", "kind": "function", "doc": "<p>Generates the bayesian model</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dataset_size</strong> (int):\nNumber of pixels of the dataset.</li>\n<li><strong>num_features</strong> (int):\nNumber of features of each pixel.</li>\n<li><strong>num_classes</strong> (int):\nNumber of classes of the dataset.</li>\n<li><strong>l1_n</strong> (int):\nNumber of neurons of the first hidden layer.</li>\n<li><strong>l2_n</strong> (int):\nNumber of neurons of the second hidden layer</li>\n<li><strong>learning_rate</strong> (float):\nInitial learning rate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>model</strong> (TensorFlow Keras Sequential):\nBayesian model ready to receive and train hyperspectral data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset_size</span>, </span><span class=\"param\"><span class=\"n\">num_features</span>, </span><span class=\"param\"><span class=\"n\">num_classes</span>, </span><span class=\"param\"><span class=\"n\">l1_n</span>, </span><span class=\"param\"><span class=\"n\">l2_n</span>, </span><span class=\"param\"><span class=\"n\">learning_rate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.plot", "modulename": "bnn4hi.lib.plot", "kind": "module", "doc": "<p>Plot module of the BNN4HI package</p>\n\n<p>The functions of this module are used to generate plots using the\nresults of the analysed bayesian predictions.</p>\n"}, {"fullname": "bnn4hi.lib.plot.uncertainty_to_map", "modulename": "bnn4hi.lib.plot", "qualname": "uncertainty_to_map", "kind": "function", "doc": "<p>Groups the uncertainty values received into uncertainty groups</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>uncertainty</strong> (ndarray):\nArray with the uncertainty values.</li>\n<li><strong>num_classes</strong> (int):\nNumber of classes of the dataset.</li>\n<li><strong>slots : int, optional (default</strong> (10)):\nNumber of groups to divide uncertainty map values.</li>\n<li><strong>max_H : float, optional (default</strong> (0)):\nThe max value of the range of uncertainty for the uncertainty\nmap. The <code>0</code> value will use the logarithm of <code>num_classes</code> as\nit is the theoretical maximum value of the uncertainty.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>u_map</strong> (ndarray):\nList with the uncertainty group corresponding to each\nuncertainty value received.</li>\n<li><strong>labels</strong> (list of strings):\nList of the labels for plotting the <code>u_map</code> value groups.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">uncertainty</span>, </span><span class=\"param\"><span class=\"n\">num_classes</span>, </span><span class=\"param\"><span class=\"n\">slots</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">max_H</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.plot.map_to_img", "modulename": "bnn4hi.lib.plot", "qualname": "map_to_img", "kind": "function", "doc": "<p>Generates an RGB image from <code>prediction</code> and <code>colours</code></p>\n\n<p>The prediction itself should represent the index of its\ncorrespondent color.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prediction</strong> (array_like):\nArray with the values to represent.</li>\n<li><strong>shape</strong> (tuple of ints):\nOriginal shape to reconstruct the image (without channels, just\nheight and width).</li>\n<li><strong>colours</strong> (list of RGB tuples):\nList of colours for the RGB image representation.</li>\n<li><strong>metric : array_like, optional (Default</strong> (None)):\nArray with the same length of <code>prediction</code> to determine a\nmetric for plotting or not each <code>prediction</code> value according to\na threshold.</li>\n<li><strong>th : float, optional (Default</strong> (0.0)):\nThreshold value to compare with each <code>metric</code> value if defined.</li>\n<li><strong>bg : RGB tuple, optional (Default</strong> ((0, 0, 0))):\nBackground color used for the pixels not represented according\nto <code>metric</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>img</strong> (ndarray):\nRGB image representation of <code>prediction</code> colouring each group\naccording to <code>colours</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prediction</span>, </span><span class=\"param\"><span class=\"n\">shape</span>, </span><span class=\"param\"><span class=\"n\">colours</span>, </span><span class=\"param\"><span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">th</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">bg</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.plot.plot_reliability_diagram", "modulename": "bnn4hi.lib.plot", "qualname": "plot_reliability_diagram", "kind": "function", "doc": "<p>Generates and saves the <code>reliability diagram</code> plot</p>\n\n<p>It saves the plot in <code>output_dir</code> in pdf format with the name\n<code>reliability_diagram.pdf</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_dir</strong> (str):\nPath of the output directory. It can be an absolute path or\nrelative from the execution path.</li>\n<li><strong>data</strong> (dict):\nIt contains the <code>reliability diagram</code> data of each dataset. The\nkey must be the dataset name abbreviation.</li>\n<li><strong>w</strong> (int):\nWidth of the plot.</li>\n<li><strong>h</strong> (int):\nHeight of the plot.</li>\n<li><strong>colours</strong> (dict):\nIt contains the HEX value of the RGB color of each dataset. The\nkey must be the dataset name abbreviation.</li>\n<li><strong>num_groups : int, optional (default</strong> (10)):\nNumber of groups to divide xticks labels.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_dir</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">colours</span>, </span><span class=\"param\"><span class=\"n\">num_groups</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.plot.plot_accuracy_vs_uncertainty", "modulename": "bnn4hi.lib.plot", "qualname": "plot_accuracy_vs_uncertainty", "kind": "function", "doc": "<p>Generates and saves the <code>accuracy vs uncertainty</code> plot</p>\n\n<p>It saves the plot in <code>output_dir</code> in pdf format with the name\n<code>accuracy_vs_uncertainty.pdf</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_dir</strong> (str):\nPath of the output directory. It can be an absolute path or\nrelative from the execution path.</li>\n<li><strong>acc_data</strong> (dict):\nIt contains the <code>accuracy vs uncertainty</code> data of each dataset.\nThe key must be the dataset name abbreviation.</li>\n<li><strong>px_data</strong> (dict):\nIt contains, for each dataset, the percentage of pixels of each\nuncertainty group. The key must be the dataset name\nabbreviation.</li>\n<li><strong>w</strong> (int):\nWidth of the plot.</li>\n<li><strong>h</strong> (int):\nHeight of the plot.</li>\n<li><strong>colours</strong> (dict):\nIt contains the HEX value of the RGB color of each dataset. The\nkey must be the dataset name abbreviation.</li>\n<li><strong>H_limit : float, optional (default</strong> (1.5)):\nThe max value of the range of uncertainty for the plot.</li>\n<li><strong>num_groups : int, optional (default</strong> (15)):\nNumber of groups to divide xticks labels.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">output_dir</span>,</span><span class=\"param\">\t<span class=\"n\">acc_data</span>,</span><span class=\"param\">\t<span class=\"n\">px_data</span>,</span><span class=\"param\">\t<span class=\"n\">w</span>,</span><span class=\"param\">\t<span class=\"n\">h</span>,</span><span class=\"param\">\t<span class=\"n\">colours</span>,</span><span class=\"param\">\t<span class=\"n\">H_limit</span><span class=\"o\">=</span><span class=\"mf\">1.5</span>,</span><span class=\"param\">\t<span class=\"n\">num_groups</span><span class=\"o\">=</span><span class=\"mi\">15</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.plot.plot_class_uncertainty", "modulename": "bnn4hi.lib.plot", "qualname": "plot_class_uncertainty", "kind": "function", "doc": "<p>Generates and saves the <code>class uncertainty</code> plot of a dataset</p>\n\n<p>It saves the plot in <code>output_dir</code> in pdf format with the name\n<code>&lt;NAME&gt;_&lt;EPOCH&gt;_class_uncertainty.pdf</code>, where <NAME> is the\nabbreviation of the dataset name and <EPOCH> the number of trained\nepochs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_dir</strong> (str):\nPath of the output directory. It can be an absolute path or\nrelative from the execution path.</li>\n<li><strong>name</strong> (str):\nThe abbreviation of the dataset name.</li>\n<li><strong>epoch</strong> (int):\nThe number of trained epochs.</li>\n<li><strong>avg_Ep</strong> (ndarray):\nList of the averages of the aleatoric uncertainty (Ep) of each\nclass. The last position also contains the average of the\nentire image.</li>\n<li><strong>avg_H_Ep</strong> (ndarray):\nList of the averages of the epistemic uncertainty (H - Ep) of\neach class. The last position also contains the average of the\nentire image.</li>\n<li><strong>w</strong> (int):\nWidth of the plot.</li>\n<li><strong>h</strong> (int):\nHeight of the plot.</li>\n<li><strong>colours</strong> (dict):\nIt contains the HEX value of the RGB color of each dataset. The\nkey must be the dataset name abbreviation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_dir</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">epoch</span>, </span><span class=\"param\"><span class=\"n\">avg_Ep</span>, </span><span class=\"param\"><span class=\"n\">avg_H_Ep</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">colours</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.plot.plot_maps", "modulename": "bnn4hi.lib.plot", "qualname": "plot_maps", "kind": "function", "doc": "<p>Generates and saves the <code>uncertainty map</code> plot of a dataset</p>\n\n<p>This plot shows an RGB representation of the hyperspectral image,\nthe ground truth, the prediction map and the uncertainty map.</p>\n\n<p>It saves the plot in <code>output_dir</code> in pdf format with the name\n<code>H_&lt;NAME&gt;.pdf</code>, where <NAME> is the abbreviation of the dataset\nname.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_dir</strong> (str):\nPath of the output directory. It can be an absolute path or\nrelative from the execution path.</li>\n<li><strong>name</strong> (str):\nThe abbreviation of the dataset name.</li>\n<li><strong>shape</strong> (tuple of ints):\nOriginal shape to reconstruct the image (without channels, just\nheight and width).</li>\n<li><strong>num_classes</strong> (int):\nNumber of classes of the dataset.</li>\n<li><strong>wl</strong> (list of floats):\nSelected wavelengths of the hyperspectral image for RGB\nrepresentation.</li>\n<li><strong>img</strong> (ndarray):\nFlattened list of the hyperspectral image pixels normalised.</li>\n<li><strong>y</strong> (ndarray):\nFlattened ground truth pixels of the hyperspectral image.</li>\n<li><strong>pred_map</strong> (ndarray):\nArray with the averages of the bayesian predictions.</li>\n<li><strong>H_map</strong> (ndarray):\nArray with the global uncertainty (H) values.</li>\n<li><strong>colours</strong> (list of RGB tuples):\nList of colours for the prediction map classes.</li>\n<li><strong>gradients</strong> (list of RGB tuples):\nList of colours for the uncertainty map groups of values.</li>\n<li><strong>max_H : float, optional (default</strong> (1.5)):\nThe max value of the range of uncertainty for the uncertainty\nmap.</li>\n<li><strong>slots : int, optional (default</strong> (15)):\nNumber of groups to divide uncertainty map values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">output_dir</span>,</span><span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">shape</span>,</span><span class=\"param\">\t<span class=\"n\">num_classes</span>,</span><span class=\"param\">\t<span class=\"n\">wl</span>,</span><span class=\"param\">\t<span class=\"n\">img</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">pred_map</span>,</span><span class=\"param\">\t<span class=\"n\">H_map</span>,</span><span class=\"param\">\t<span class=\"n\">colours</span>,</span><span class=\"param\">\t<span class=\"n\">gradients</span>,</span><span class=\"param\">\t<span class=\"n\">max_H</span><span class=\"o\">=</span><span class=\"mf\">1.5</span>,</span><span class=\"param\">\t<span class=\"n\">slots</span><span class=\"o\">=</span><span class=\"mi\">15</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.plot.plot_uncertainty_with_noise", "modulename": "bnn4hi.lib.plot", "qualname": "plot_uncertainty_with_noise", "kind": "function", "doc": "<p>Generates and saves the <code>noise</code> plot of a dataset</p>\n\n<p>It saves the plot in <code>output_dir</code> in pdf format with the name\n<code>&lt;NAME&gt;_noise.pdf</code>, where <NAME> is the abbreviation of the dataset\nname.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_dir</strong> (str):\nPath of the output directory. It can be an absolute path or\nrelative from the execution path.</li>\n<li><strong>name</strong> (str):\nThe abbreviation of the dataset name.</li>\n<li><strong>labels</strong> (ndarray):\nList of the evaluated noises that will be used as xlabels.</li>\n<li><strong>data</strong> (ndarray):\nIt contains the class predictions for the list of noises of\nthe dataset. The two last positions correspond to the average\nand the maximum uncertainty value prepared to be plotted.</li>\n<li><strong>w</strong> (int):\nWidth of the plot.</li>\n<li><strong>h</strong> (int):\nHeight of the plot.</li>\n<li><strong>colours</strong> (dict):\nIt contains the HEX value of the RGB color of each dataset. The\nkey must be the dataset name abbreviation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_dir</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">colours</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.plot.plot_combined_noise", "modulename": "bnn4hi.lib.plot", "qualname": "plot_combined_noise", "kind": "function", "doc": "<p>Generates and saves the <code>combined noise</code> plot</p>\n\n<p>It saves the plot in <code>output_dir</code> in pdf format with the name\n<code>combined_noise.pdf</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_dir</strong> (str):\nPath of the output directory. It can be an absolute path or\nrelative from the execution path.</li>\n<li><strong>labels</strong> (ndarray):\nList of the evaluated noises that will be used as xlabels.</li>\n<li><strong>data</strong> (dict):\nIt contains the normalised average predictions for the list of\nnoises of each dataset. The key must be the dataset name\nabbreviation.</li>\n<li><strong>w</strong> (int):\nWidth of the plot.</li>\n<li><strong>h</strong> (int):\nHeight of the plot.</li>\n<li><strong>colours</strong> (dict):\nIt contains the HEX value of the RGB color of each dataset. The\nkey must be the dataset name abbreviation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_dir</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">colours</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.lib.plot.plot_mixed_uncertainty", "modulename": "bnn4hi.lib.plot", "qualname": "plot_mixed_uncertainty", "kind": "function", "doc": "<p>Generates and saves the <code>mixed classes</code> plot of a dataset</p>\n\n<p>It saves the plot in <code>output_dir</code> in pdf format with the name\n<code>&lt;NAME&gt;_&lt;EPOCH&gt;_mixed_classes.pdf</code>, where <NAME> is the\nabbreviation of the dataset name and <EPOCH> the number of trained\nepochs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_dir</strong> (str):\nPath of the output directory. It can be an absolute path or\nrelative from the execution path.</li>\n<li><strong>name</strong> (str):\nThe abbreviation of the dataset name.</li>\n<li><strong>epoch</strong> (int):\nThe number of trained epochs.</li>\n<li><strong>data</strong> (list of lists):\nContains one list for the normal model predictions with the\naleatoric uncertainty (Ep) values of the mixed classes and the\ndataset average, and other list with the same information for\nthe mixed model predictions.</li>\n<li><strong>class_a</strong> (int):\nNumber of the first mixed class.</li>\n<li><strong>class_b</strong> (int):\nNumber of the second mixed class.</li>\n<li><strong>w</strong> (int):\nWidth of the plot.</li>\n<li><strong>h</strong> (int):\nHeight of the plot.</li>\n<li><strong>colours</strong> (dict):\nIt contains the HEX value of the RGB color of each dataset. The\nkey must be the dataset name abbreviation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_dir</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">epoch</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">class_a</span>, </span><span class=\"param\"><span class=\"n\">class_b</span>, </span><span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">colours</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test", "modulename": "bnn4hi.test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bnn4hi.test.parse_args", "modulename": "bnn4hi.test", "qualname": "parse_args", "kind": "function", "doc": "<p>Analyses the received parameters and returns them organised.</p>\n\n<p>Takes the list of strings received at sys.argv and generates a\nnamespace asigning them to objects.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>out</strong> (namespace):\nThe namespace with the values of the received parameters asigned\nto objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test.predict", "modulename": "bnn4hi.test", "qualname": "predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_test</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test.main", "modulename": "bnn4hi.test", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">epochs</span>, </span><span class=\"param\"><span class=\"n\">epoch</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test_map", "modulename": "bnn4hi.test_map", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bnn4hi.test_map.parse_args", "modulename": "bnn4hi.test_map", "qualname": "parse_args", "kind": "function", "doc": "<p>Analyses the received parameters and returns them organised.</p>\n\n<p>Takes the list of strings received at sys.argv and generates a\nnamespace asigning them to objects.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>out</strong> (namespace):\nThe namespace with the values of the received parameters asigned\nto objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test_map.predict", "modulename": "bnn4hi.test_map", "qualname": "predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test_map.main", "modulename": "bnn4hi.test_map", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">epochs</span>, </span><span class=\"param\"><span class=\"n\">epoch</span>, </span><span class=\"param\"><span class=\"n\">legend</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test_mixed", "modulename": "bnn4hi.test_mixed", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bnn4hi.test_mixed.parse_args", "modulename": "bnn4hi.test_mixed", "qualname": "parse_args", "kind": "function", "doc": "<p>Analyses the received parameters and returns them organised.</p>\n\n<p>Takes the list of strings received at sys.argv and generates a\nnamespace asigning them to objects.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>out</strong> (namespace):\nThe namespace with the values of the received parameters asigned\nto objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test_mixed.predict", "modulename": "bnn4hi.test_mixed", "qualname": "predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_test</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test_mixed.main", "modulename": "bnn4hi.test_mixed", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">epochs</span>, </span><span class=\"param\"><span class=\"n\">epoch</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test_noise", "modulename": "bnn4hi.test_noise", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bnn4hi.test_noise.parse_args", "modulename": "bnn4hi.test_noise", "qualname": "parse_args", "kind": "function", "doc": "<p>Analyses the received parameters and returns them organised.</p>\n\n<p>Takes the list of strings received at sys.argv and generates a\nnamespace assigning them to objects.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>out</strong> (namespace):\nThe namespace with the values of the received parameters asigned\nto objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test_noise.noise_predict", "modulename": "bnn4hi.test_noise", "qualname": "noise_predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_test</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.test_noise.main", "modulename": "bnn4hi.test_noise", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">epochs</span>, </span><span class=\"param\"><span class=\"n\">epoch</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.train", "modulename": "bnn4hi.train", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "bnn4hi.train.parse_args", "modulename": "bnn4hi.train", "qualname": "parse_args", "kind": "function", "doc": "<p>Analyses the received parameters and returns them organised.</p>\n\n<p>Takes the list of strings received at sys.argv and generates a\nnamespace asigning them to objects.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>out</strong> (namespace):\nThe namespace with the values of the received parameters asigned\nto objects.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.train.PrintCallback", "modulename": "bnn4hi.train", "qualname": "PrintCallback", "kind": "class", "doc": "<p>Abstract base class used to build new callbacks.</p>\n\n<p>Callbacks can be passed to keras methods such as <code>fit</code>, <code>evaluate</code>, and\n<code>predict</code> in order to hook into the various stages of the model training and\ninference lifecycle.</p>\n\n<p>To create a custom callback, subclass <code>keras.callbacks.Callback</code> and override\nthe method associated with the stage of interest. See\n<a href=\"https://www.tensorflow.org/guide/keras/custom_callback\">https://www.tensorflow.org/guide/keras/custom_callback</a> for more information.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">training_finished</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyCallback</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">callbacks</span><span class=\"o\">.</span><span class=\"n\">Callback</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>  <span class=\"k\">def</span> <span class=\"nf\">on_train_end</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">logs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">global</span> <span class=\"n\">training_finished</span>\n<span class=\"gp\">... </span>    <span class=\"n\">training_finished</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">([</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">input_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,))])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean_squared_error&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">([[</span><span class=\"mf\">1.0</span><span class=\"p\">]]),</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">([[</span><span class=\"mf\">1.0</span><span class=\"p\">]]),</span>\n<span class=\"gp\">... </span>          <span class=\"n\">callbacks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">MyCallback</span><span class=\"p\">()])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">assert</span> <span class=\"n\">training_finished</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n</code></pre>\n</div>\n\n<p>If you want to use <code>Callback</code> objects in a custom training loop:</p>\n\n<ol>\n<li>You should pack all your callbacks into a single <code>callbacks.CallbackList</code>\nso they can all be called together.</li>\n<li>You will need to manually call all the <code>on_*</code> methods at the appropriate\nlocations in your loop. Like this:\n<pre><code>callbacks =  tf.keras.callbacks.CallbackList([...])\ncallbacks.append(...)\n\ncallbacks.on_train_begin(...)\nfor epoch in range(EPOCHS):\n  callbacks.on_epoch_begin(epoch)\n  for i, data in dataset.enumerate():\n    callbacks.on_train_batch_begin(i)\n    batch_logs = model.train_step(data)\n    callbacks.on_train_batch_end(i, batch_logs)\n  epoch_logs = ...\n  callbacks.on_epoch_end(epoch, epoch_logs)\nfinal_logs=...\ncallbacks.on_train_end(final_logs)\n</code></pre></li>\n</ol>\n\n<p>Attributes:\n    params: Dict. Training parameters\n        (eg. verbosity, batch size, number of epochs...).\n    model: Instance of <code>keras.models.Model</code>.\n        Reference of the model being trained.</p>\n\n<p>The <code>logs</code> dictionary that callback methods\ntake as argument will contain keys for quantities relevant to\nthe current batch or epoch (see method-specific docstrings).</p>\n", "bases": "keras.callbacks.Callback"}, {"fullname": "bnn4hi.train.PrintCallback.__init__", "modulename": "bnn4hi.train", "qualname": "PrintCallback.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">print_epoch</span><span class=\"o\">=</span><span class=\"mi\">1000</span>, </span><span class=\"param\"><span class=\"n\">losses_avg_no</span><span class=\"o\">=</span><span class=\"mi\">100</span></span>)</span>"}, {"fullname": "bnn4hi.train.PrintCallback.print_loss_acc", "modulename": "bnn4hi.train", "qualname": "PrintCallback.print_loss_acc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">logs</span>, </span><span class=\"param\"><span class=\"n\">time</span>, </span><span class=\"param\"><span class=\"n\">last</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.train.PrintCallback.on_train_begin", "modulename": "bnn4hi.train", "qualname": "PrintCallback.on_train_begin", "kind": "function", "doc": "<p>Called at the beginning of training.</p>\n\n<p>Subclasses should override for any actions to run.</p>\n\n<p>Args:\n    logs: Dict. Currently no data is passed to this argument for this method\n      but that may change in the future.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">logs</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.train.PrintCallback.on_batch_end", "modulename": "bnn4hi.train", "qualname": "PrintCallback.on_batch_end", "kind": "function", "doc": "<p>A backwards compatibility alias for <code>on_train_batch_end</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">batch</span>, </span><span class=\"param\"><span class=\"n\">logs</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.train.PrintCallback.on_epoch_end", "modulename": "bnn4hi.train", "qualname": "PrintCallback.on_epoch_end", "kind": "function", "doc": "<p>Called at the end of an epoch.</p>\n\n<p>Subclasses should override for any actions to run. This function should only\nbe called during TRAIN mode.</p>\n\n<p>Args:\n    epoch: Integer, index of epoch.\n    logs: Dict, metric results for this training epoch, and for the\n      validation epoch if validation is performed. Validation result keys\n      are prefixed with <code>val_</code>. For training epoch, the values of the\n     <code>Model</code>'s metrics are returned. Example : <code>{'loss': 0.2, 'accuracy':\n       0.7}</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">epoch</span>, </span><span class=\"param\"><span class=\"n\">logs</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.train.PrintCallback.on_train_end", "modulename": "bnn4hi.train", "qualname": "PrintCallback.on_train_end", "kind": "function", "doc": "<p>Called at the end of training.</p>\n\n<p>Subclasses should override for any actions to run.</p>\n\n<p>Args:\n    logs: Dict. Currently the output of the last call to <code>on_epoch_end()</code>\n      is passed to this argument for this method but that may change in\n      the future.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">logs</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "bnn4hi.train.main", "modulename": "bnn4hi.train", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">epochs</span>, </span><span class=\"param\"><span class=\"n\">period</span>, </span><span class=\"param\"><span class=\"n\">mix_classes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();